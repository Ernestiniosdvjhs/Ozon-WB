import logging
import telebot
import threading
import schedule
from time import sleep
from telebot import types

import wb_python_requests
import wb_database
import wb_table
import ozon_requests
import ozon_database
import ozon_table

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –¢–æ–∫–µ–Ω Telegram
token = "[Your Telegram token]"
bot = telebot.TeleBot(token)


def format_user_choices(user_choices):
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—ã–±–æ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    # :param user_choices: –°–ª–æ–≤–∞—Ä—å —Å –≤—ã–±–æ—Ä–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # :return: –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
    formatted_list = []
    for choice, details in user_choices.items():
        formatted_str = f"{choice}\n"
        for key, value in details.items():
            formatted_str += f"{key}: {value}\n"
        formatted_list.append(formatted_str)
    return formatted_list


def format_wb_choices(user_choices):
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—ã–±–æ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è Wildberries.
    # :param user_choices: –°–ª–æ–≤–∞—Ä—å —Å –≤—ã–±–æ—Ä–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # :return: –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
    formatted_list = []
    for choice, detail in user_choices.items():
        formatted_list.append(f"{choice}: {detail}\n")
    return formatted_list


def send_wb_tasks():
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á–∏ Wildberries –≤ Telegram.
    try:
        tasks = wb_python_requests.get_tasks(wb_python_requests.python_API)
        formatted_tasks = format_wb_choices(wb_database.orders_insert(tasks)[1])
        if formatted_tasks:
            bot.send_message("[Your chatID]", '–ù–æ–≤—ã–µ —Å–±–æ—Ä–æ—á–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è Wildberries:\n')
            for task in formatted_tasks:
                bot.send_message("[Your chatID]", task)
    except Exception as e:
        logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–¥–∞—á Wildberries: %s", e)


def schedule_tasks():
    # –ü–ª–∞–Ω–∏—Ä—É–µ—Ç —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –∑–∞–¥–∞—á–∏.
    schedule.every(1).minutes.do(send_wb_tasks)
    schedule.every().day.at("15:00").do(send_wb_tasks)
    schedule.every().day.at("18:00").do(send_wb_tasks)
    while True:
        schedule.run_pending()
        sleep(1)


@bot.message_handler(commands=['start'])
def start(message):
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start.
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("/start"))
    markup.add(types.KeyboardButton("üõí–ó–∞–∫–∞–∑—ã"))
    markup.add(types.KeyboardButton("üîÑ–û–±–Ω–æ–≤–∏—Ç—å –∞—Ä—Ç–∏–∫—É–ª—ã"))
    markup.add(types.KeyboardButton("üìã–û–±–Ω–æ–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É"))
    markup.add(types.KeyboardButton("üÜÜ–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–ø—É—Å–∫ WB"))
    bot.send_message(message.chat.id, '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ù–∞–∂–∞–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, –í—ã –º–æ–∂–µ—Ç–µ:\n'
                                      '‚Ä¢ —É–≤–∏–¥–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞–∫–∞–∑—ã;\n'
                                      '‚Ä¢ –æ–±–Ω–æ–≤–∏—Ç—å –∞—Ä—Ç–∏–∫—É–ª—ã —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö;\n'
                                      '‚Ä¢ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–∞—Ö –≤ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ;\n'
                                      '‚Ä¢ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–æ–ø—É—Å–∫ –Ω–∞ —Å–∫–ª–∞–¥ Wildberries.', reply_markup=markup)


@bot.message_handler(func=lambda message: True)
def handle_all_messages(message):
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
    if message.text == "üõí–ó–∞–∫–∞–∑—ã":
        show_orders(message)
    elif message.text == "üîÑ–û–±–Ω–æ–≤–∏—Ç—å –∞—Ä—Ç–∏–∫—É–ª—ã":
        update_offer_id(message)
    elif message.text == "üìã–û–±–Ω–æ–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É":
        update_table(message)
    elif message.text == "üÜÜ–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–ø—É—Å–∫ WB":
        create_wb_pass(message)
    elif message.text == "/start":
        start(message)


@bot.message_handler(commands=['wb_pass'])
def process_wb_pass_details(message):
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–∞ WB.
    answer_choice = message.text.strip().split('\n')
    try:
        wb_python_requests.get_pass(wb_python_requests.python_API, answer_choice)
        bot.send_message(message.chat.id, '–ü—Ä–æ–ø—É—Å–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω')
    except Exception as e:
        logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –ø—Ä–æ–ø—É—Å–∫–∞: %s", e)
        bot.send_message(message.chat.id, '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–æ–ø—É—Å–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ'
                                          ' –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.')


def handle_wb_pass(message):
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–∞ WB.
    pass_choice = message.text
    if pass_choice == '1':
        try:
            wb_python_requests.get_pass(wb_python_requests.python_API, ['–ò–º—è', '–§–∞–º–∏–ª–∏—è', '–ú–∞—Ä–∫–∞ –º–∞—à–∏–Ω—ã', '–ù–æ–º–µ—Ä'])
            bot.send_message(message.chat.id, '–ü—Ä–æ–ø—É—Å–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω')
        except Exception as e:
            logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –ø—Ä–æ–ø—É—Å–∫–∞: %s", e)
            bot.send_message(message.chat.id, '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–æ–ø—É—Å–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ.')
    elif pass_choice == '2':
        answer = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª—è (–ò–º—è, –§–∞–º–∏–ª–∏—è, –ú–æ–¥–µ–ª—å –º–∞—à–∏–Ω—ã, –ù–æ–º–µ—Ä –º–∞—à–∏–Ω—ã)'
                                                   ' –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n–ê–ª–µ–∫—Å–∞–Ω–¥—Ä\n–ü–µ—Ç—Ä–æ–≤\nLamborghini\nA456BC123')
        bot.register_next_step_handler(answer, process_wb_pass_details)
    elif pass_choice == '3':
        bot.send_message(message.chat.id, '‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.')
    else:
        bot.send_message(message.chat.id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ "1" –∏–ª–∏ "2"')
        create_wb_pass(message)


def create_wb_pass(message):
    # –ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–∞ WB.
    msg = bot.send_message(message.chat.id, '–û—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–æ–ø—É—Å–∫ –Ω–∞:\n1Ô∏è‚É£ Chery Tiggo "–ù973–û–•702"\n2Ô∏è‚É£ –î—Ä—É–≥—É—é –º–∞—à–∏–Ω—É\n3'
                                            'Ô∏è‚É£ –û—Ç–º–µ–Ω–∞\n(–í –æ—Ç–≤–µ—Ç–µ –≤–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É)')
    bot.register_next_step_handler(msg, handle_wb_pass)


@bot.message_handler(commands=['offer_id'])
def process_offer_id_details(message):
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–æ–≤.
    answer_choice = message.text
    if answer_choice == '1':
        try:
            wb_database.products_update(wb_python_requests.get_info(wb_python_requests.python_API))
            bot.send_message(message.chat.id, '–ê—Ä—Ç–∏–∫—É–ª—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã')
        except Exception as e:
            logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ Wildberries: %s", e)
            bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞—Ä—Ç–∏–∫—É–ª–æ–≤.')
    elif answer_choice == '2':
        try:
            ozon_database.products_update(ozon_requests.get_ids())
            bot.send_message(message.chat.id, '–ê—Ä—Ç–∏–∫—É–ª—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã')
        except Exception as e:
            logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ Ozon: %s", e)
            bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞—Ä—Ç–∏–∫—É–ª–æ–≤.')
    elif answer_choice == '3':
        bot.send_message(message.chat.id, '‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.')
    else:
        bot.send_message(message.chat.id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ "1" –∏–ª–∏ "2"')
        update_offer_id(message)


def update_offer_id(message):
    # –ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞—Ä—Ç–∏–∫—É–ª–æ–≤.
    msg = bot.send_message(message.chat.id, '–û–±–Ω–æ–≤–∏—Ç—å –∞—Ä—Ç–∏–∫—É–ª—ã –¥–ª—è:\n1Ô∏è‚É£ Wildberries\n2Ô∏è‚É£ Ozon\n3Ô∏è‚É£ –û—Ç–º–µ–Ω–∞\n'
                                            '(–í –æ—Ç–≤–µ—Ç–µ –≤–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É)')
    bot.register_next_step_handler(msg, process_offer_id_details)


@bot.message_handler(commands=['table_up'])
def process_table_update(message):
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü.
    answer_choice = message.text
    if answer_choice == '1':
        try:
            sheet_url = wb_table.orders_table()
            bot.send_message(message.chat.id, f'–î–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {sheet_url}')
        except Exception as e:
            logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã Wildberries: %s", e)
            bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ.')
    elif answer_choice == '2':
        try:
            sheet_url = ozon_table.orders_table()
            bot.send_message(message.chat.id, f'–î–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {sheet_url}')
        except Exception as e:
            logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã Ozon: %s", e)
            bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ.')
    elif answer_choice == '3':
        bot.send_message(message.chat.id, '‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.')
    else:
        bot.send_message(message.chat.id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ "1" –∏–ª–∏ "2"')
        update_table(message)


def update_table(message):
    # –ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü.
    msg = bot.send_message(message.chat.id, '–û–±–Ω–æ–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –¥–ª—è:\n1Ô∏è‚É£ Wildberries\n2Ô∏è‚É£ Ozon\n3Ô∏è‚É£ –û—Ç–º–µ–Ω–∞\n'
                                            '(–í –æ—Ç–≤–µ—Ç–µ –≤–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É)')
    bot.register_next_step_handler(msg, process_table_update)


@bot.message_handler(commands=['orders'])
def process_orders_details(message):
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∑–∞–∫–∞–∑–æ–≤.
    answer_choice = message.text
    if answer_choice == '1':
        try:
            user_choices = wb_database.orders_insert(wb_python_requests.get_tasks(wb_python_requests.python_API))[0]
            formatted_choices = format_user_choices(user_choices)
            if formatted_choices:
                bot.send_message(message.chat.id, '–°–±–æ—Ä–æ—á–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç:')
                for choice in formatted_choices:
                    bot.send_message(message.chat.id, choice)
            else:
                bot.send_message(message.chat.id, '–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç')
        except Exception as e:
            logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤ Wildberries: %s", e)
            bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤.')
    elif answer_choice == '2':
        try:
            user_choices = ozon_database.orders_insert(ozon_requests.get_ids(), ozon_requests.get_fbs())
            formatted_choices = format_user_choices(user_choices)
            if formatted_choices:
                bot.send_message(message.chat.id, '–ó–∞–∫–∞–∑—ã –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç:')
                for choice in formatted_choices:
                    bot.send_message(message.chat.id, choice)
            else:
                bot.send_message(message.chat.id, '–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç')
        except Exception as e:
            logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤ Ozon: %s", e)
            bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤.')
    elif answer_choice == '3':
        bot.send_message(message.chat.id, '‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.')
    else:
        bot.send_message(message.chat.id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ "1" –∏–ª–∏ "2"')
        show_orders(message)


def show_orders(message):
    # –ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤.
    msg = bot.send_message(message.chat.id,
                           '–í—ã–≤–µ—Å—Ç–∏ –∑–∞–∫–∞–∑—ã –¥–ª—è:\n1Ô∏è‚É£ Wildberries\n2Ô∏è‚É£ Ozon\n3Ô∏è‚É£ –û—Ç–º–µ–Ω–∞\n(–í –æ—Ç–≤–µ—Ç–µ –≤–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É)')
    bot.register_next_step_handler(msg, process_orders_details)


if __name__ == '__main__':
    thread = threading.Thread(target=schedule_tasks)
    thread.start()
    bot.polling(none_stop=True)
